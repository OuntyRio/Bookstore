package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"

	"github.com/ountyrio/gql-bookstore/internal/graph/generated"
	gqlmodel "github.com/ountyrio/gql-bookstore/internal/graph/model"
	"github.com/ountyrio/gql-bookstore/internal/types"
)

// Create is the resolver for the create field.
func (r *booksMutationNSResolver) Create(ctx context.Context, obj *gqlmodel.BooksMutationNs, input *gqlmodel.BooksMutationNsInput) (*gqlmodel.BooksMutationNsMutationResult, error) {
	authors := make([]int, len(input.Authors))
	for i := range input.Authors {
		authors = append(authors, *input.Authors[i])
	}

	body := &types.BookCreateRequestDto{
		Title:   *input.Title,
		Authors: authors,
		Genre:   *input.Genre,
	}

	book, err := r.bookService.Create(ctx, body)

	if err != nil {
		return nil, err
	}

	res := &gqlmodel.BooksMutationNsMutationResult{
		Changed: CastBookDtoToGql(&book.Created),
	}
	return res, nil
}

// Update is the resolver for the update field.
func (r *booksMutationNSResolver) Update(ctx context.Context, obj *gqlmodel.BooksMutationNs, input *gqlmodel.BooksMutationNsInput) (*gqlmodel.BooksMutationNsMutationResult, error) {
	authors := make([]int, len(input.Authors))
	for i := range input.Authors {
		authors = append(authors, *input.Authors[i])
	}

	body := &types.BookUpdateRequestDto{
		ID:      *input.ID,
		Title:   *input.Title,
		Authors: authors,
		Genre:   *input.Genre,
	}

	book, err := r.bookService.Update(ctx, body)

	if err != nil {
		return nil, err
	}

	res := &gqlmodel.BooksMutationNsMutationResult{
		Changed: CastBookDtoToGql(&book.Updated),
	}

	return res, nil
}

// Delete is the resolver for the delete field.
func (r *booksMutationNSResolver) Delete(ctx context.Context, obj *gqlmodel.BooksMutationNs, input *gqlmodel.BooksMutationNsInput) (*gqlmodel.BooksMutationNsMutationResult, error) {
	body := &types.BookIDRequestDto{
		ID: *input.ID,
	}

	err := r.bookService.Delete(ctx, body)

	if err != nil {
		return nil, err
	}

	res := &gqlmodel.BooksMutationNsMutationResult{
		Changed: &gqlmodel.Book{
			ID: input.ID,
		},
	}

	return res, nil
}

// BooksMutationNS returns generated.BooksMutationNSResolver implementation.
func (r *Resolver) BooksMutationNS() generated.BooksMutationNSResolver {
	return &booksMutationNSResolver{r}
}

type booksMutationNSResolver struct{ *Resolver }
