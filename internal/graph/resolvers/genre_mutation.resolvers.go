package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"

	"github.com/ountyrio/gql-bookstore/internal/graph/generated"
	gqlmodel "github.com/ountyrio/gql-bookstore/internal/graph/model"
	"github.com/ountyrio/gql-bookstore/internal/types"
)

// Create is the resolver for the create field.
func (r *genresMutationNSResolver) Create(ctx context.Context, obj *gqlmodel.GenresMutationNs, input *gqlmodel.GenresMutationNsInput) (*gqlmodel.GenresMutationNsMutationResult, error) {
	body := &types.GenreCreateRequestDto{
		Name: *input.Name,
	}

	genre, err := r.genreService.Create(ctx, body)

	if err != nil {
		return nil, err
	}

	res := &gqlmodel.GenresMutationNsMutationResult{
		Changed: CastGenreDtoToGql(&genre.Created),
	}

	return res, nil
}

// Update is the resolver for the update field.
func (r *genresMutationNSResolver) Update(ctx context.Context, obj *gqlmodel.GenresMutationNs, input *gqlmodel.GenresMutationNsInput) (*gqlmodel.GenresMutationNsMutationResult, error) {
	body := &types.GenreUpdateRequestDto{
		ID:   *input.ID,
		Name: *input.Name,
	}

	genre, err := r.genreService.Update(ctx, body)

	if err != nil {
		return nil, err
	}

	res := &gqlmodel.GenresMutationNsMutationResult{
		Changed: CastGenreDtoToGql(&genre.Updated),
	}

	return res, nil
}

// Delete is the resolver for the delete field.
func (r *genresMutationNSResolver) Delete(ctx context.Context, obj *gqlmodel.GenresMutationNs, input *gqlmodel.GenresMutationNsInput) (*gqlmodel.GenresMutationNsMutationResult, error) {
	body := &types.GenreIDRequestDto{
		ID: *input.ID,
	}

	err := r.genreService.Delete(ctx, body)

	if err != nil {
		return nil, err
	}

	result := &gqlmodel.GenresMutationNsMutationResult{
		Changed: &gqlmodel.Genre{
			ID: input.ID,
		},
	}

	return result, nil
}

// GenresMutationNS returns generated.GenresMutationNSResolver implementation.
func (r *Resolver) GenresMutationNS() generated.GenresMutationNSResolver {
	return &genresMutationNSResolver{r}
}

type genresMutationNSResolver struct{ *Resolver }
