package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"

	"github.com/ountyrio/gql-bookstore/internal/common"
	"github.com/ountyrio/gql-bookstore/internal/graph/generated"
	gqlmodel "github.com/ountyrio/gql-bookstore/internal/graph/model"
	"github.com/ountyrio/gql-bookstore/internal/types"
)

// Get is the resolver for the get field.
func (r *booksQueryNSResolver) Get(ctx context.Context, obj *gqlmodel.BooksQueryNs, id int) (*gqlmodel.Book, error) {
	query := &types.BookIDRequestDto{
		ID: id,
	}

	book, err := r.bookService.GetById(ctx, query)

	if err != nil {
		return nil, err
	}

	res := CastBookDtoToGql(&book.Book)
	return res, nil
}

// Query is the resolver for the query field.
func (r *booksQueryNSResolver) Query(ctx context.Context, obj *gqlmodel.BooksQueryNs, filter *gqlmodel.BooksQueryNsQueryFilterInput) (*gqlmodel.BooksQueryNsQueryResult, error) {
	query := &types.BookQueryRequestDto{}

	if filter.Pagination != nil {
		if filter.Pagination.Page != nil {
			query.Page = *filter.Pagination.Page

			if query.Page < 1 {
				query.Page = 1
			}
		}
		if filter.Pagination.Limit != nil {
			query.Limit = *filter.Pagination.Limit

			if query.Limit < 1 {
				query.Limit = 1
			}
		}
	}

	if filter.Sort != nil {
		if filter.Sort.Field != nil {
			query.Field = *filter.Sort.Field
			if query.Field == "" {
				query.Field = "Title"
			}
		}

		if filter.Sort.Order != nil {
			query.Order = *filter.Sort.Order
			if query.Order == "" {
				query.Order = "ASC"
			}
		}
	}

	book, err := r.bookService.Query(ctx, query)

	if err != nil {
		return nil, err
	}

	ptr := int(book.Count)

	return &gqlmodel.BooksQueryNsQueryResult{
		Books: common.SliceMapPtr(CastBookDtoToGql, book.Books),
		Count: &ptr,
	}, nil
}

// BooksQueryNS returns generated.BooksQueryNSResolver implementation.
func (r *Resolver) BooksQueryNS() generated.BooksQueryNSResolver { return &booksQueryNSResolver{r} }

type booksQueryNSResolver struct{ *Resolver }
